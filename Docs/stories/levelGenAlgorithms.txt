PUT_RUBBLE
----------
- starting at a randomly chosen tile START
- choose a tile CENTER no more than +/- 5 tiles away from START along the X and Y axes
- let LENGTH and WIDTH be between 1 and 4, inclusive
- place 1 x 1 rubble tiles in a LENGTH x WIDTH rectangle around CENTER
- repeat 4-8 times for a single, nicely randomized patch of rubble

Places random piles of rubble throughout the Z-level in question.  Wherever a chunk of rubble is placed, the original dirt floor tile is reinitialized to be impassable rubble instead.  Generally speaking, only passable tiles may be overwritten in this manner, so rubble will not erase doors, walls, etc.

PUT_BUILDING
------------
LG places "buildings" throughout Z0.  All tiles in the wall of a building are reinitialized to be a wall.  All tiles in the interior of a building are reinitialized to be wooden floor.  Walls which would be placed over a wooden floor are instead ignored.  Wooden floor placed over a wall erases the wall.  If the walls of two buildings would be flush with one another, both walls are replaced with wooden floor.  Any non-corner wall has a 1 / 12 chance of being a crumbling (breakable) wall, a 1 / 12 chance of being a broken (passable) wall, and a 1 / 12 chance of being a door.

Drunken Walk
------------
A variant of the Random Walk algorithm.  In Random Walk on a 2D array, at every step, a step is taken in one of the eight possible directions (north, northeast, east, etc.) at random.  Drunken Walk differs from Random Walk in that the probability of choosing a direction is weighted toward the "goal".  This goal is a discrete tile in our implementation, so that the weights will correct back towards the goal when the Drunken Walk roams off target.

Game of Life
------------
Open quote from Wikipedia--
The universe of the Game of Life is an infinite two-dimensional orthogonal grid of square cells, each of which is in one of two possible states, live or dead. Every cell interacts with its eight neighbors, which are the cells that are directly horizontally, vertically, or diagonally adjacent. At each step in time, the following transitions occur:

   1. Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.
   2. Any live cell with more than three live neighbours dies, as if by overcrowding.
   3. Any live cell with two or three live neighbours lives on to the next generation.
   4. Any dead cell with exactly three live neighbours becomes a live cell.
-- end quote.
Our implementation is more flexible than the original, in that the numbers given above are taken as arguments.  These are informally specified in the use cases referencing Game of Life.  For instance, a "lushly fecund" run of GoL may allow a living cell to stay alive with 1-5 neighbors and a dead one might come alive with two to four neighbors.

An arbitrary Tile object to "Life" is taken as an argument, as well as a set of other types of tile to ignore and never replace.  Up and down slopes are never replaced.  These attributes allow the algorithm to flexibly modify dungeon levels, generally rounding off hard corners and making things look somewhat organic.


PUT_PIT
-------
Place 1 x 1 pit seeds throughout the affected Z-level, overwriting whatever was on those squares.  They shall be no less than 40 squares apart to preclude the possibility of overlap upon expansion.

LG expands the pit seeds to be roughly half-moon shaped.  On the next floor down, the half moons are reproduced in the same X-Y locations, "carving" passable space out of the solid granite there.

LG replaces half moons with down slope tiles on Z + 0, up slope tiles on Z + 1.

Working out from the "open" side of the crescent down slopes, the LG emplaces pits on Z + 0 using multiple iterations of drunken walk.  Pit tiles may be placed over anything except down slopes.  Each pit tile on Z + 0 is mirrored on Z + 1 as a stone floor tile.

A "fecund" variant of the Game Of Life (GoL) algorithm is used to "smooth off" the edges of the pits on Z + 0.  In order to avoid having to remember what the pit tiles were originally, any pit tile that "dies" in the course of this algorithm is replaced by a crumbling dirt tile.

Flood Fill
----------
(As copy / pasted from Wikipedia)
Flood-fill (node, target-color, replacement-color):
 1. If the color of node is not equal to target-color, return.
 2. Set the color of node to replacement-color.
 3. Perform Flood-fill (one step to the west of node, target-color, replacement-color).
    Perform Flood-fill (one step to the east of node, target-color, replacement-color).
    Perform Flood-fill (one step to the north of node, target-color, replacement-color).
    Perform Flood-fill (one step to the south of node, target-color, replacement-color).
 4. Return.

BOMB_GO_OFF
-----------
Randomly select impassable tiles in the area of the "bombing" and turn them into a different kind of tile, usually a passable one.  Neither pit tiles nor slopes may be affected by a bombing.

PUT_ORC_WATCHTOWERS
-------------------
Orcish watchtowers are emplaced on the Z-level.  They are 4 x 4 tiles wide and may overwrite any type of tile beside pit, slope, granite wall, or orcish watchtower.  If they would intersect with one of these types of tile, a new location is chosen.

ACID_FILL
---------
The algorithm will Flood Fill an area of passable floor with a "color."  When that area is completely filled, the algorithm will switch to a different color and fill another passable area.  When all such areas are filled, if there is more than one color, the algorithm begins expanding each passable area by a combination "bombing" and Drunken Walk algorithm, favoring expanding the sides of the open area that are facing away from the edge of the 120 x 120 map, weighted particularly heavily to expand towards the center of the map.  When two areas of different color meet one another, they both adopt a uniform color.  This process continues until all open areas are filled with the same color.

PUT_TERRAIN_STREAMER_WATER
--------------------------
"streamers" of water are generated on Z2 with two-pass iterations of Drunken Walk.  For each iteration, a starting point is found with the criteria that it cannot be less than 20 squares of an up slope and that it must be in a wall.  An ending point is chosen that must be at least 20 squares from an up slope and may not be in a wall.  A drunken line represented by an ordered set of Tile objects representing a potential streamer is made between the two.  If a potential streamer would pass within 10 squares of an up slope, it is thrown away and recalculated.  If this happens three times, a new start and end point are calculated.  If successful, all potential streamer tiles become shallow water tiles.

All shallow water tiles such that 12 or more of the 24 tiles within 3 units of Manhattan Distance (no diagonals) from it are shallow or deep water become deep water.

PUT_LICHEN
----------
Nearly identical to PUT_RUBBLE.  Lichen may be placed over stone floor tiles but no other type of tile, and it is considered passable to other algorithms, although it significantly slows movement through tiles it occupies.

DRUNKEN_MINESHAFT
-----------------
This algorithm carves a meandering line of passable floor which varies between 1 and 4 tiles wide in the general direction of the goal, similarly to Drunken Walk, but does not correct back towards the goal tile if it veers.

At no point will the algorithm overwrite an up slope; if it would do so, it instead finds the four nearest stone walls and replaces them with floor.

Each "step" of the algorithm is encapsulated in an object.  The objects will track the error between where the step is actually centered and a straight line between start and finish points.  If this error grows larger than ten, then without filling any of the excavated granite walls back in, the algorithm will "back up" to the most recent step at which the error was less than six and resume execution from that spot.








